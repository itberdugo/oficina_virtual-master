{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/utils/helpers.ts"],"sourcesContent":["'use server'\nimport crypto from 'crypto';\n\nconst SCP = process.env.PASSWORD_ENCRYPT_KEY as string;\n\nexport async function GenerateCode() {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nexport async function encryptALONE(text:string, secretKey:string) {\n    const iv = crypto.randomBytes(16); // Vector de inicialización aleatorio\n    const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(secretKey, 'hex'), iv);\n    let encrypted = cipher.update(text, 'utf-8', 'hex');\n    encrypted += cipher.final('hex');\n    return iv.toString('hex') + encrypted;\n}\n\n//funcion para encriptar una contraseña \n\nexport async function encrypt(text:string, secretKey:string = SCP) {\n\n    const iv = crypto.randomBytes(16); // Vector de inicialización aleatorio\n    const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(secretKey, 'hex'), iv);\n    let encrypted = cipher.update(text, 'utf-8', 'hex');\n    encrypted += cipher.final('hex');\n    return iv.toString('hex') + encrypted;\n  }\n\nexport async function decrypt(encryptedText:string, secretKey:string) {\n    const iv = Buffer.from(encryptedText.slice(0, 32), 'hex'); // Extraer el IV del texto cifrado\n    const encryptedData = encryptedText.slice(32); // Datos cifrados sin el IV\n    const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(secretKey, 'hex'), iv);\n    let decrypted = decipher.update(encryptedData, 'hex', 'utf-8');\n    decrypted += decipher.final('utf-8');\n    return decrypted;\n}"],"names":[],"mappings":";;;;;;;;AAAA;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,oBAAoB;AAErC,eAAe;IAClB,OAAO,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;AAC/D;AAEO,eAAe,aAAa,IAAW,EAAE,SAAgB;IAC5D,MAAM,KAAK,yCAAA,CAAA,UAAM,CAAC,WAAW,CAAC,KAAK,qCAAqC;IACxE,MAAM,SAAS,yCAAA,CAAA,UAAM,CAAC,cAAc,CAAC,eAAe,OAAO,IAAI,CAAC,WAAW,QAAQ;IACnF,IAAI,YAAY,OAAO,MAAM,CAAC,MAAM,SAAS;IAC7C,aAAa,OAAO,KAAK,CAAC;IAC1B,OAAO,GAAG,QAAQ,CAAC,SAAS;AAChC;AAIO,eAAe,QAAQ,IAAW,EAAE,YAAmB,GAAG;IAE7D,MAAM,KAAK,yCAAA,CAAA,UAAM,CAAC,WAAW,CAAC,KAAK,qCAAqC;IACxE,MAAM,SAAS,yCAAA,CAAA,UAAM,CAAC,cAAc,CAAC,eAAe,OAAO,IAAI,CAAC,WAAW,QAAQ;IACnF,IAAI,YAAY,OAAO,MAAM,CAAC,MAAM,SAAS;IAC7C,aAAa,OAAO,KAAK,CAAC;IAC1B,OAAO,GAAG,QAAQ,CAAC,SAAS;AAC9B;AAEK,eAAe,QAAQ,aAAoB,EAAE,SAAgB;IAChE,MAAM,KAAK,OAAO,IAAI,CAAC,cAAc,KAAK,CAAC,GAAG,KAAK,QAAQ,kCAAkC;IAC7F,MAAM,gBAAgB,cAAc,KAAK,CAAC,KAAK,2BAA2B;IAC1E,MAAM,WAAW,yCAAA,CAAA,UAAM,CAAC,gBAAgB,CAAC,eAAe,OAAO,IAAI,CAAC,WAAW,QAAQ;IACvF,IAAI,YAAY,SAAS,MAAM,CAAC,eAAe,OAAO;IACtD,aAAa,SAAS,KAAK,CAAC;IAC5B,OAAO;AACX"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/utils/mongo.ts"],"sourcesContent":["'use server'\nimport { PatientDataMongo } from \"@/types\"\nimport { MongoClient } from \"mongodb\"\nimport { decrypt, encrypt } from \"./helpers\"\n\nexport async function InsertTempCode(documento: string,email:string, code: string) {\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n\n        \n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('mfa')\n        //se elimina el documento si ya existe\n\n        await collection.deleteMany({documento})\n\n        await collection.insertOne({ documento, code , email,createAt: new Date()})\n        return  true\n    }\n\n    catch(e){\n        console.log(e)\n        return false\n\n    }\n    \n    finally{\n            await client.close()\n        }\n}\nexport async function GetTempCode(documento: string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('mfa')\n\n        const res = await collection.findOne({documento},{projection: {_id: 0}}) \n\n        return res ? res as unknown as  {documento: string, code: string, email: string, createAt: Date}\n         : null\n\n    }\n\n    catch(e){\n        console.log(e)\n        return null\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function saveUserDB(data:PatientDataMongo){\n\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n\n        await collection.insertOne({...data, password: await encrypt(data.password, process.env.PASSWORD_ENCRYPT_KEY|| '')})\n\n        return true\n    }\n\n    catch(e){\n        console.log(e)\n        return false\n    }\n\n    finally{\n        await client.close()\n    }\n\n}\nexport async function getUserExists(documento: string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n\n        const res = await collection.findOne({documento: Number(documento)},{projection: {_id: 0}})\n\n        return res ? true : false\n    }\n\n    catch(e){\n        console.log(e)\n        return true\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function getMailExists(email: string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n        const res = await collection.findOne({correo:email},{projection: {_id: 0}})\n\n        return res ? true : false\n    }\n\n    catch(e){\n        console.log(e)\n        return true\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function LoginUserDB(documento:string,password:string){\n\n\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n        const projection = {projection: {_id: 0, primer_nombre:1, segundo_nombre:1, primer_apellido:1, \n            segundo_apellido:1, correo:1, documento:1,eps:1,password:1}}\n            const res = await collection.findOne({documento:Number(documento)},projection)\n            console.log('resultado:', res);\n        if(!res) return null\n\n        const decrypted = await decrypt(res.password, process.env.PASSWORD_ENCRYPT_KEY || '')\n\n        console.log('decrypted:', decrypted);\n        if(decrypted !== password) return null\n\n        return res as unknown as PatientDataMongo\n        \n    }\n\n    catch(e){\n        console.log(e)\n        return null\n    }\n\n    finally{\n        await client.close()\n    }\n\n}\nexport async function getDocumentoByEmail(email:string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n        const res = await collection.findOne({correo:email},{projection: {_id: 0, documento: 1}})\n\n        return res ? res.documento as Number : null\n    }\n\n    catch(e){\n        console.log(e)\n        return null\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function getMailByDocumento(documento:string){\n\n\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n        const res = await collection.findOne({documento:Number(documento)},{projection: {_id: 0, correo: 1}})\n        return res ? res.correo as string : null\n    }\n\n    catch(e){\n        console.log(e)\n        return null\n    }\n\n    finally{\n        await client.close()\n    }\n\n}\nexport async function SetNewPassword(documento: string, password: string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n\n        await collection.updateOne({documento: Number(documento)},{$set: {password: await encrypt(password, process.env.PASSWORD_ENCRYPT_KEY || '')}})\n\n        return true\n    }\n\n    catch(e){\n        console.log(e)\n        return false\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function getUserRegisterByMail(email:string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n        const res = await collection.findOne({correo:email},{projection: {_id: 0,iat:0,password:0}})\n\n        return res ? res as unknown as PatientDataMongo : null\n    }\n\n    catch(e){\n        console.log(e)\n        return null\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function getUserRegisterByDocumento(documento:string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n        const res = await collection.findOne({documento:Number(documento)},{projection: {_id: 0,iat:0,password:0}})\n\n        return res ? res as unknown as PatientDataMongo : null\n    }\n\n    catch(e){\n        console.log(e)\n        return null\n    }\n\n    finally{\n        await client.close()\n    }\n}\nexport async function setNewPasswordByDocumento(documento:string,password:string){\n    const client = new MongoClient(process.env.MONGO_URI || '')\n\n    try{\n        await client.connect()\n        const db = client.db('oficina_virtual')\n        const collection = db.collection('usuarios')\n\n        await collection.updateOne({documento:Number(documento)},{$set: {password: await encrypt(password, process.env.PASSWORD_ENCRYPT_KEY || '')}})\n\n        return true\n    }\n\n    catch(e){\n        console.log(e)\n        return false\n    }\n\n    finally{\n        await client.close()\n    }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/utils/helpers_client.ts"],"sourcesContent":["import crypto from 'crypto'\n\n\nexport function unifiedName(primer_nombre:string, segundo_nombre:string, primer_apellido:string, segundo_apellido:string){\n\n\n    return (primer_nombre + ' ') + (segundo_nombre ? segundo_nombre + ' ' : '') + (primer_apellido ? primer_apellido + ' ' : '') + (segundo_apellido ? segundo_apellido : '')\n}\nexport function generarContrasena() {\n  const simbolos = '!@#$%^&*()_+~`|}{[]:;?><,./-=';\n  const numeros = '0123456789';\n  const mayusculas = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  let contrasena = '';\n  contrasena += simbolos[crypto.randomInt(simbolos.length)];\n  contrasena += numeros[crypto.randomInt(numeros.length)] + numeros[crypto.randomInt(numeros.length)];\n  contrasena += mayusculas[crypto.randomInt(mayusculas.length)];\n\n  while (contrasena.length < 8) {\n    const chars = simbolos + numeros + mayusculas;\n    contrasena += chars[crypto.randomInt(chars.length)];\n  }\n\n  // Mezclar los caracteres\n  contrasena = contrasena.split('').sort(() => 0.5 - Math.random()).join('');\n\n  return contrasena;\n}\nexport function ValidateEmail(mail:string) {\n  const re = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i\n  return re.test(mail);\n}\n\nexport function ValidateSecurityPassword(password:string){\n  const mensajesError = [];\n\n  // Verificar longitud mínima de 8 caracteres\n  if (password.length < 8) {\n      mensajesError.push(\"La contraseña debe tener al menos 8 caracteres.\");\n  }\n\n  // Verificar al menos un símbolo\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      mensajesError.push(\"La contraseña debe tener al menos un símbolo.\");\n  }\n\n  // Verificar al menos dos números\n  if ((password.match(/\\d/g) || []).length < 2) {\n      mensajesError.push(\"La contraseña debe tener al menos dos números.\");\n  }\n\n  // Verificar al menos una mayúscula\n  if (!/[A-Z]/.test(password)) {\n      mensajesError.push(\"La contraseña debe tener al menos una letra mayúscula.\");\n  }\n\n  return mensajesError;\n}\n\n"],"names":[],"mappings":";;;;;;;;;AAGO,SAAS,YAAY,aAAoB,EAAE,cAAqB,EAAE,eAAsB,EAAE,gBAAuB;IAGpH,OAAO,AAAC,gBAAgB,MAAO,CAAC,iBAAiB,iBAAiB,MAAM,EAAE,IAAI,CAAC,kBAAkB,kBAAkB,MAAM,EAAE,IAAI,CAAC,mBAAmB,mBAAmB,EAAE;AAC5K;AACO,SAAS;IACd,MAAM,WAAW;IACjB,MAAM,UAAU;IAChB,MAAM,aAAa;IAEnB,IAAI,aAAa;IACjB,cAAc,QAAQ,CAAC,yCAAA,CAAA,UAAM,CAAC,SAAS,CAAC,SAAS,MAAM,EAAE;IACzD,cAAc,OAAO,CAAC,yCAAA,CAAA,UAAM,CAAC,SAAS,CAAC,QAAQ,MAAM,EAAE,GAAG,OAAO,CAAC,yCAAA,CAAA,UAAM,CAAC,SAAS,CAAC,QAAQ,MAAM,EAAE;IACnG,cAAc,UAAU,CAAC,yCAAA,CAAA,UAAM,CAAC,SAAS,CAAC,WAAW,MAAM,EAAE;IAE7D,MAAO,WAAW,MAAM,GAAG,EAAG;QAC5B,MAAM,QAAQ,WAAW,UAAU;QACnC,cAAc,KAAK,CAAC,yCAAA,CAAA,UAAM,CAAC,SAAS,CAAC,MAAM,MAAM,EAAE;IACrD;IAEA,yBAAyB;IACzB,aAAa,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,IAAM,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC;IAEvE,OAAO;AACT;AACO,SAAS,cAAc,IAAW;IACvC,MAAM,KAAK;IACX,OAAO,GAAG,IAAI,CAAC;AACjB;AAEO,SAAS,yBAAyB,QAAe;IACtD,MAAM,gBAAgB,EAAE;IAExB,4CAA4C;IAC5C,IAAI,SAAS,MAAM,GAAG,GAAG;QACrB,cAAc,IAAI,CAAC;IACvB;IAEA,gCAAgC;IAChC,IAAI,CAAC,yBAAyB,IAAI,CAAC,WAAW;QAC1C,cAAc,IAAI,CAAC;IACvB;IAEA,iCAAiC;IACjC,IAAI,CAAC,SAAS,KAAK,CAAC,UAAU,EAAE,EAAE,MAAM,GAAG,GAAG;QAC1C,cAAc,IAAI,CAAC;IACvB;IAEA,mCAAmC;IACnC,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW;QACzB,cAAc,IAAI,CAAC;IACvB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { LoginUserDB } from \"@/utils/mongo\";\nimport { decrypt } from \"@/utils/helpers\";\nimport { unifiedName } from \"@/utils/helpers_client\";\n\n\nconsole.log('NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET); \nconsole.log('PASSWORD_ENCRYPT_KEY:', process.env.PASSWORD_ENCRYPT_KEY);\n\n\n\nconst handler = NextAuth({\n\n    secret: process.env.NEXTAUTH_SECRET,  \n    providers: [\n        CredentialsProvider({\n            name: 'Credentials',\n            credentials: {\n                username: { label: \"Username\", type: \"text\" },\n                password: {  label: \"Password\", type: \"password\" }\n            },\n            async authorize(credentials, req) {\n                // Add logic here to look up the user from the credentials supplied\n                \n\n                if(!credentials) return null\n\n                if(credentials.username.length < 5 || credentials.password.length < 5) return null\n\n                const decrypted = await decrypt(credentials.password, process.env.PASSWORD_ENCRYPT_KEY || '')\n                const user = await LoginUserDB(credentials.username, decrypted)\n\n                if(!user) return null\n\n                return {\n                    name: unifiedName(user.primer_nombre, user.segundo_nombre, user.primer_apellido, user.segundo_apellido),\n                    id: String(user.documento),\n                    email: String(user.documento),\n                    image: user.eps\n                }\n            }\n        })\n    ]\n\n})\n\nexport { handler as GET , handler as POST}"],"names":[],"mappings":";;;;;;;;;;;;;;;AAOA,QAAQ,GAAG,CAAC,oBAAoB,QAAQ,GAAG,CAAC,eAAe;AAC3D,QAAQ,GAAG,CAAC,yBAAyB,QAAQ,GAAG,CAAC,oBAAoB;AAIrE,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IAErB,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAG,OAAO;oBAAY,MAAM;gBAAW;YACrD;YACA,MAAM,WAAU,WAAW,EAAE,GAAG;gBAC5B,mEAAmE;gBAGnE,IAAG,CAAC,aAAa,OAAO;gBAExB,IAAG,YAAY,QAAQ,CAAC,MAAM,GAAG,KAAK,YAAY,QAAQ,CAAC,MAAM,GAAG,GAAG,OAAO;gBAE9E,MAAM,YAAY,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAE,QAAQ,GAAG,CAAC,oBAAoB,IAAI;gBAC1F,MAAM,OAAO,MAAM,CAAA,GAAA,uHAAA,CAAA,cAAW,AAAD,EAAE,YAAY,QAAQ,EAAE;gBAErD,IAAG,CAAC,MAAM,OAAO;gBAEjB,OAAO;oBACH,MAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD,EAAE,KAAK,aAAa,EAAE,KAAK,cAAc,EAAE,KAAK,eAAe,EAAE,KAAK,gBAAgB;oBACtG,IAAI,OAAO,KAAK,SAAS;oBACzB,OAAO,OAAO,KAAK,SAAS;oBAC5B,OAAO,KAAK,GAAG;gBACnB;YACJ;QACJ;KACH;AAEL"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}